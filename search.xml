<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python 列表生成式|字典生成式|集合生成式]]></title>
    <url>%2F2019%2F07%2F28%2Fpython-%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F-%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[列表生成式列表生成式是python中强大的用来创建list的表达式。 如果想生成list[1,2,3,4,5],可以用list(range(1,6))来实现:12&gt;&gt;&gt; list(range(1,6))[1, 2, 3, 4, 5] 但如果要生成[1+1,2+2,3+3,4+4,5+5]呢？可以使用循环来实现:123456&gt;&gt;&gt; L=[]&gt;&gt;&gt; for i in range(1,6):... L.append(i+i)...&gt;&gt;&gt; L[2, 4, 6, 8, 10] 上述实现太麻烦了,有没有更好的实现方式？答案就是列表生成式:1234&gt;&gt;&gt; [x for x in range(1,6)][1, 2, 3, 4, 5]&gt;&gt;&gt; [x+x for x in range(1,6)][2, 4, 6, 8, 10] 列表生成式的写法很简单:要生成的元素(x+x)写在前面,后面跟for语句.列表生成式的for循环还可以跟if语句，起过滤作用，比如我们想打印1到10之间的偶数：12&gt;&gt;&gt; [x for x in range(1,11) if x%2==0][2, 4, 6, 8, 10] 列表生成式还可以使用两层for循环生成全排列:12&gt;&gt;&gt; [x+y for x in "hello" for y in "world"]['hw', 'ho', 'hr', 'hl', 'hd', 'ew', 'eo', 'er', 'el', 'ed', 'lw', 'lo', 'lr', 'll', 'ld', 'lw', 'lo', 'lr', 'll', 'ld', 'ow', 'oo', 'or', 'ol', 'od'] 字典生成式字典生成式和列表生成式的使用方法类似。利用字典生成式快速的交换字典的键和值:123&gt;&gt;&gt; d=&#123;"age":12,"name":"bruce","mobile":"400-63446789"&#125;&gt;&gt;&gt; &#123;v:k for k,v in d.items()&#125;&#123;12: 'age', 'bruce': 'name', '400-63446789': 'mobile'&#125; 集合生成式集合生成式和列表生成式的用法也是类似的，唯一的区别是它使用{}:12&gt;&gt;&gt; &#123;x for x in range(1,6)&#125;&#123;1, 2, 3, 4, 5&#125;]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 装饰器详解]]></title>
    <url>%2F2019%2F07%2F14%2Fpython-%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[什么是装饰器在介绍装饰器之前，首先需要对python中函数的特性有所了解： 1.函数也是对象，能被引用，也能传递给变量，同样也能作为函数的返回。 2.函数能在另一个函数内定义并且可以作为参数传递给函数。 装饰器本质上是一个函数/类，允许我们去包装函数/类以扩展函数/类的行为，装饰器的返回也是一个函数/类。装饰器比较适用的场景包括插入日志、性能测试、事务处理、缓存、权限校验等。 简而言之：装饰器作用就是为函数/类扩展新的功能。 实例如果我们有个需求，需要记录函数被调用的日志。我们可以这样实现： decorator.py12345678910from datetime import datetimedef logging(func): print(func.__name__,"函数在 %s 被调用" %datetime.now()) func()def func(): print("hello world")logging(func) 输出:12func 函数在 2019-08-09 23:34:49.218367 被调用hello world 有没有更好的方法实现呢？答案就是装饰器。decorator.py12345678910111213from datetime import datetimedef logging(func): def wrapper(): print(func.__name__,"函数在 %s 被调用" %datetime.now()) func() return wrapper@loggingdef func(): print("hello world")func()print(func.__name__) 输出:123func 函数在 2019-08-09 23:39:02.930807 被调用hello worldwrapper logging就是一个装饰器。真正实现业务逻辑的func函数被包裹在logging内，就好像被logging装饰了。为什么func.name的结果为wrapper而不是func？因为logging装饰器返回的函数为wrapper。 如何把原始函数的name等属性复制到wrapper函数中？Python内置的functools.wraps可以实现decorator.py123456789101112131415from datetime import datetimeimport functoolsdef logging(func): @functools.wraps(func) def wrapper(): print(func.__name__,"函数在 %s 被调用" %datetime.now()) func() return wrapper@loggingdef func(): print("hello world")func()print(func.__name__) 输出:123func 函数在 2019-08-09 23:40:07.817565 被调用hello worldfunc 如果我们的func函数需要传递一些参数呢？我们可以在定义warpper函数的时候指定参数。 decorator.py123456789101112131415from datetime import datetimeimport functoolsdef logging(func): @functools.wraps(func) def wrapper(*args): print(func.__name__,"函数在 %s 被调用" %datetime.now()) func(*args) return wrapper@loggingdef func(name): print("hello %s" %name)func("decorator")print(func.__name__) 输出:123func 函数在 2019-08-09 23:41:33.550211 被调用hello decoratorfunc 装饰器有很大的灵活性，我们也可以给装饰器指定参数，比如@logging(n),如果我们想把日志输出到一个文件，而不是在终端输出，就可以通过修饰器参数指定文件路径实现。 decorator.py12345678910111213141516171819from datetime import datetimeimport functoolsdef logit(logfile='out.log'): def logging(func): @functools.wraps(func) def wrapper(*args): log_info=func.__name__+"函数在 %s 被调用" %datetime.now() with open(logfile, 'a') as opened_file: opened_file.write(log_info + '\n') func(*args) return wrapper return logging@logit()def func(name): print("hello %s" %name)func("decorator")print(func.__name__) 输出:12345PS D:\liguohan\Desktop&gt; python a.pyhello decoratorfuncPS D:\liguohan\Desktop&gt; cat .\out.logfunc函数在 2019-08-09 23:42:36.800536 被调用]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c语言中char s[]和char *s的区别]]></title>
    <url>%2F2019%2F06%2F09%2Fc%E8%AF%AD%E8%A8%80%E4%B8%ADchar-s-%E5%92%8Cchar-s%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[char s1[]=”hello world”; char *s2=”hello world”; 上面两行代码的区别：第一行char s1[]=”hello world” ,编译器在会在栈上分配12个字节(包括字符串末尾的’\0’)的空间给数组s1,s1的值就是数组首元素’h’在栈上的地址，第二行char *s2=”hello world”，编译器先在内存代码段(code segment)的常量区为”hello world”分配12个字节，然后再将指针s2指向该区域。由于s2指向常量区，所以s2不可以被修改。两者最大的区别在于s1存储在栈上，可以修改，s2存储在代码段的常量区，不可修改。 看下面这段程序：test.c1234567891011121314#include&lt;stdio.h&gt;int main()&#123; char s1[]="hello world"; char *s2="hello world"; s1[0]='H'; s2[0]='H'; printf("%c\n",s1[0]); printf("%d\n",s2); printf("%d\n",s1); printf("%d\n",&amp;s1[0]); return 0;&#125; 上述程序编译ok，但是执行的时候出现段错误:出现段错误因为第8行代码试图修改常量区的内容。将第8行注释掉，执行是ok的：上述执行结果也验证了s1的值就是数组首字母在栈上的地址。也可以反汇编来验证：gcc -S test.c]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[经典算法-八皇后问题]]></title>
    <url>%2F2019%2F06%2F08%2F%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95-%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[八皇后问题八皇后问题是一个以国际象棋为背景的问题：如何能够在8×8的国际象棋棋盘上放置八个皇后，使得任何一个皇后都无法直接吃掉其他的皇后？为了达到此目的，任两个皇后都不能处于同一条横行、纵行或斜线上。八皇后问题可以推广为更一般的n皇后摆放问题：这时棋盘的大小变为n×n，而皇后个数也变成n。当且仅当n = 1或n ≥ 4时问题有解[1]。 分析八皇后问题最经典的解法是回溯法和递归，回溯算法以后学习了在写吧，今天主要是以递归算法分析。 递归算法基本思路：在第一行任意选取一个位置（比如第一行第一列），然后判断该位置上能否放置皇后（其实就是判断该位置对应的行，列，以及对角线位置上是否已经有皇后），如不能放置皇后，就在该行选取另外一个位置（比如第一行第二列）进行判断，如能放置皇后，就换到第二行，后面所有行的操作都与第一行完全一致。递归代码如下：EightQueen.c12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;stdio.h&gt;//判断棋盘上第raw行，第coulmn列是否可以放置皇后int isdanger(int raw,int column,int (*chess)[8])&#123; int sign0=0,sign1=0,sign2=0,sign3=0,sign4=0; //先判断列 int i,j; for(i=0;i&lt;8;i++) if(chess[i][column]==1) &#123; sign0=1; break; &#125; //判断左上方 for(i=raw,j=column;i&gt;=0&amp;&amp;j&gt;=0;i--,j--) if(chess[i][j]==1) &#123; sign1=1; break; &#125; //判断右上方 for(i=raw,j=column;i&gt;=0&amp;&amp;j&lt;8;i--,j++) if(chess[i][j]==1) &#123; sign2=1; break; &#125; //判断左下方 for(i=raw,j=column;i&lt;8&amp;&amp;j&gt;=0;i++,j--) if(chess[i][j]==1) &#123; sign3=1; break; &#125; //判断右下方 for(i=raw,j=column;i&lt;8&amp;&amp;j&lt;8;i++,j++) if(chess[i][j]==1) &#123; sign4=1; break; &#125; return sign0||sign1||sign2||sign3||sign4;&#125;void EightQueen(int raw,int column,int (*chess)[8])&#123;int temp_chess[8][8],i,j;for(i=0;i&lt;8;i++) for(j=0;j&lt;8;j++) temp_chess[i][j]=chess[i][j];//如果raw==8,表明棋盘已经放满8个皇后if(raw==8)&#123;printf("第%d种摆法\n",count);for(i=0;i&lt;8;i++) &#123; for(j=0;j&lt;8;j++) printf("%d ",*(*(temp_chess+i)+j)); printf("\n"); &#125; count++;&#125;else&#123; for(i=0;i&lt;column;i++) &#123; //判断棋盘上第raw行，第coulmn列是否可以放置皇后 if(!isdanger(raw,i,chess)) &#123; for(j=0;j&lt;column;j++) temp_chess[raw][j]=0; //第raw行，第coulmn列位置上放置一个皇后 temp_chess[raw][i]=1; //递归 EightQueen(raw+1,column,temp_chess); &#125; &#125;&#125;&#125;int main()&#123;int chess[8][8]=&#123;0&#125;;EightQueen(0,8,chess);return 0;&#125; 执行结果: 总共有92种摆法。]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[经典算法-汉诺塔问题]]></title>
    <url>%2F2019%2F06%2F02%2F%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95-%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[传说传说越南河内某间寺院有三根银棒，上串 64 个金盘。寺院里的僧侣依照一个古老的预言，以特定规则移动这些盘子；预言说当这些盘子移动完毕，世界就会灭亡。这个传说叫做梵天寺之塔问题（Tower of Brahma puzzle）。盘子移动的规则如下： 1.每次只能移动一个圆盘。 2.大盘不能叠在小盘上面。 汉诺塔问题由此得来，到底该如何移动盘子？最少需要移动多少次呢？ 分析为了简化分析的过程，以三个金盘为例： 汉诺塔问题最终的目的是将银棒A上的金盘借助银棒B移动到银棒C，可以把这个复杂问题简化为三步： 1.将银棒A上n-1个金盘借助银棒C转移到银棒B 2.将银棒A上第n个金盘转移到银棒C 3.将银棒B上n-1个金盘借助银棒A转移到银棒C 由以上分析可知，我们能把一个大问题转化为若干个相似的小问题，用递归比较合适。递归的基本思想是把规模大的问题转化为规模小的相似的子问题来解决。在函数实现时，因为解决大问题的方法和解决小问题的方法往往是同一个方法，所以就产生了函数调用它自身的情况。另外这个解决问题的函数必须有明显的结束条件，这样就不会产生无限递归的情况了。 代码如下：hanoi.cpp123456789101112131415161718192021222324#include&lt;iostream&gt;using namespace std;void hanoi(int num,char src,char buf,char dest)&#123; if(num==0) return; else &#123; hanoi(num-1,src,dest,buf); cout&lt;&lt;"将盘子"&lt;&lt;num&lt;&lt;"从柱子"&lt;&lt;src&lt;&lt;"转移到柱子"&lt;&lt;dest&lt;&lt;endl; hanoi(num-1,buf,src,dest); &#125;&#125;int main()&#123; int num; cin&gt;&gt;num; hanoi(num,'A','B','C'); return 0;&#125; 执行结果：通过程序执行结果，不难看出如果有n个盘子，至少要移动2^n-1次。若传说属实，僧侣们需要 2^64-1步才能完成这个任务；若他们每秒可完成一个盘子的移动，就需要 5849 亿年才能完成。整个宇宙现在也不过 137 亿年。]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c语言缓冲区详解]]></title>
    <url>%2F2019%2F06%2F01%2Fc%E8%AF%AD%E8%A8%80%E7%BC%93%E5%86%B2%E5%8C%BA%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[c语言缓冲区缓冲区属于内存的一部分，用来暂时保存输入或者输出的数据。标准的输入输出设备都包含缓冲区，标准输入设备对应的缓冲区称为输入缓冲区，标准输出备对应的缓冲区称为输出缓冲区。 缓冲区的意义？例如程序在执行的过程中从磁盘读信息，会将读到的信息首先放入到缓冲区，计算机直接从缓冲区中拿数据，这样做的好处是减少了读磁盘的次数（磁盘IO的速度远低于读缓冲区的速度），大大的提高了程序的运行速度。 缓冲区分类全缓冲直到缓冲区被填满，才调用系统I/O函数。对于读操作来说，直到读入的内容的字节数等于缓冲区大小或者文件已经到达结尾，才进行实际的I/O操作， 将外存文件内容读入缓冲区；对于写操作来说，直到缓冲区被填满，才进行实际的I/O操作，缓冲区内容写到外存文件中。磁盘文件通常是全缓冲的。 行缓冲行缓冲：直到遇到换行符’\n’，才调用系统I/O库函数。对于读操作来说，遇到换行符’\n’才进行I/O操作，将所读内容读入缓冲区；对于写操作来说， 遇到换行符’\n’才进行I/O操作，将缓冲区内容写到外存中。由于缓冲区的大小是有限的，所以当缓冲区被填满时，即使没有遇到换行符’\n’，也同样会 进行实际的I/O操作。标准输入stdin和标准输出stdout默认都是行缓冲的。 无缓冲没有缓冲区，数据会立即读入或者输出到外存文件和设备上。标准出错stderr是无缓冲的，这样保证错误提示和输出能够及时反馈给用户，供用户排除错误。 缓冲区刷新的时机？1.缓冲区满时 2.行缓冲区遇到回车时 3.关闭文件 4.使用特定函数刷新缓冲区 缓冲区能怎样影响我们的程序？在很多情况下，我们需要清理输入输出缓冲区，这样我们才能正确的获取下一个输入。看看下面的例子： buffer.c123456789101112131415161718#include&lt;stdio.h&gt;int main()&#123; char str[20],ch; scanf("%s", str); ch=getchar(); printf("%s\n", str); printf("%c", ch); return 0;&#125; 执行结果: 该程序的目的是从标准输入接收一个字符串和字符，然后打印出来，但是执行的结果跟预期不符：输入liguohan后还没输入字符程序就结束了。原因在于：当输入liguohan后按下enter键会产生一个换行符’\n’,输入缓冲区被刷新，liguohan被刷新到数组str中，此时缓冲区中还剩字符’\n’,被getchar()读取，因次打印结果如上所示。 如何改进程序达到我们预期的输出？方法1： buffer.c123456789101112131415161718#include&lt;stdio.h&gt;int main()&#123; char str[20],ch; scanf("%s", str); while((ch=getchar())=='\n'); printf("%s\n", str); printf("%c\n", ch); return 0;&#125; 执行结果：程序中利用 while((ch=getchar())==’\n’)语句将输入缓冲区中’\n’忽略掉。 方法2：buffer.c12345678910111213141516171819#include&lt;stdio.h&gt;int main()&#123; char str[20],ch; scanf("%s", str); setbuf(stdin, NULL); ch=getchar(); printf("%s\n", str); printf("%c\n", ch); return 0;&#125; 执行结果：该方法利用setbuf()函数将输入缓冲区清空。 抛转引玉到这。。。]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>c语言</tag>
      </tags>
  </entry>
</search>
